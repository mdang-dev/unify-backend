name: Unify CI/CD

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/unify-backend
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  MAIL_HOST: ${{ secrets.MAIL_HOST }}
  MAIL_PORT: ${{ secrets.MAIL_PORT }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
  LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
  LIVEKIT_HOST: ${{ secrets.LIVEKIT_HOST }}
  LIVEKIT_URL: ${{ secrets.LIVEKIT_URL }}

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Maven Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven wrapper executable
        run: chmod +x mvnw

      - name: Build with Maven
        run: ./mvnw -ntp clean package -DskipTests

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ env.DOCKERHUB_USERNAME }}
      #     password: ${{ env.DOCKERHUB_TOKEN }}

      # - name: Build and Publish Docker Image
      #   env:
      #     DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
      #   run: |
      #     ./mvnw spring-boot:build-image -DskipTests
      #     echo "Pushing the image $DOCKER_IMAGE_NAME to Docker Hub..."
      #     docker push $DOCKER_IMAGE_NAME

      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
